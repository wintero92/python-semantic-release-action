name: Release
description: Create release

inputs:
  GITHUB_TOKEN:
    description: "GITHUB_TOKEN"
    required: true

  target_branch:
    description: "Target branch for releases."
    default: dev

outputs:
  NEW_RELEASE:
    description: "Equal to true if there is new release, false if not."
    value: ${{ steps.new_release.outputs.NEW_RELEASE }}

  NEW_VERSION:
    description: "New release version."
    value: ${{ steps.release_version.outputs.NEW_VERSION }}

runs:
  using: "composite"
  steps:
    - name: Check if there is new release
      id: new_release
      shell: bash
      env:
        GH_TOKEN: ${{inputs.GH_TOKEN}}
        NPM_TOKEN: ${{inputs.GH_TOKEN}}
      run: |
        raw_new_release=$(semantic-release version --noop 2>&1 | grep "No release will be made" | wc -l || echo 0)
        [[ "${raw_new_release}" == "0" ]] && new_release=true || new_release=false
        echo "NEW_RELEASE=${new_release}" >> $GITHUB_OUTPUT
        echo "NEW_RELEASE=${new_release}"

    - name: Release version
      id: release_version
      shell: bash
      env:
        GH_TOKEN: ${{inputs.GH_TOKEN}}
        NPM_TOKEN: ${{inputs.GH_TOKEN}}
      run: |
        raw_release_info=$(semantic-release version --noop 2>&1 | grep "bump" || echo no_release)
        new_version=$(echo $raw_release_info | sed -nE 's/.*bumped from ([0-9]+\.[0-9]+\.[0-9]+) to ([0-9]+\.[0-9]+\.[0-9]+).*/\2/p')
        echo "NEW_VERSION=${new_version}" >> $GITHUB_OUTPUT
        echo "NEW_VERSION=${new_version}"

    - name: Publish release
      if: github.ref == 'refs/heads/${{inputs.target_branch}}'
      shell: bash
      env:
        GH_TOKEN: ${{inputs.GITHUB_TOKEN}}
      run: |
        source .venv/bin/activate
        git config user.name github-actions
        git config user.email github-actions@github.com
        semantic-release publish -v DEBUG
        git push origin HEAD:${{inputs.target_branch}}
